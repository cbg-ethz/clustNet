mutCovData.umap$layout[2,]
mutCovData.umap$layout[100,]
mutCovData.umap$layout[1000,]
kmeans(mutCovData.umap$layout)
kmeans(mutCovData.umap$layout,23)
aa <- kmeans(mutCovData.umap$layout,23)
aa$cluster
library(survival)
library(RColorBrewer)
## load data ##
output <- read.table("data/tcga-clinical-information.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
clusterResMut <- readRDS("results/clusterResMutS.rds")
clusterResMut
aaa <- list()
aaa$clustermembership <- aa
sinlge_cox_analysis
sinlge_cox_analysis(aaa,mutCovData, output)
sinlge_cox_analysis(readRDS("clustering/results/test/clusterResCond_i200_s1.rds"),mutCovData, output)
aaa$clustermembership
aaa$clustermembership$cluster
as.character(aaa$clustermembership$cluster)
aaa$clustermembership <-  as.character(aaa$clustermembership$cluster)
aaa$clustermembership
clusterResMut$clustermembership
aaa$clustermembership <-  as.numeric(aaa$clustermembership$cluster)
aaa$clustermembership <-  aa$cluster
aaa$clustermembership
unname(aaa$clustermembership)
clusterResMut$clustermembership
aaa$clustermembership <- unname(aaa$clustermembership)
sinlge_cox_analysis(aaa,mutCovData, output)
a <- list()
a$clustermembership <- sample(1:23, 1000)
a$clustermembership <- sample(1:23, 1000, replace = TRUE)
a$clustermembership <- sample(1:23, 1000, replace = TRUE)
length(aaa$clustermembership)
a$clustermembership <- sample(1:23, length(aaa$clustermembership))
a$clustermembership <- sample(1:23, length(aaa$clustermembership), replace = TRUE)
sinlge_cox_analysis(a,mutCovData, output)
sinlge_cox_analysis(a,mutCovData, output)
sinlge_cox_analysis(sample(1:23, length(aaa$clustermembership), replace = TRUE),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
data1 <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_adult_binarized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_adult_binarized
head (data_adult_binarized)
head(data_adult_binarized)
dim(data_adult_binarized)
data_adult_binarized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_compas_binerized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/compas_binerized.csv")
data_german_binerized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/german_binerized.csv")
dim(data_compas_binerized)
dim(data_german_binerized)
head(data_german_binerized)
head(data_compas_binerized)
library(netClust)
get_clusters
?get_clusters
library("devtools")
install_github("fritzbayer/netClust", auth_token="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")
german_clusters <- netClust::get_clusters(data_german_binerized)
plot_dag
library(SubGroupSeparation)
SubGroupSeparation:::plot_dag
SubGroupSeparation:::plot_dag(german_clusters$DAGs[1])
german_clusters$DAGs[1]
plot((german_clusters$DAGs[1]))
german_clusters$DAGs[1]
german_clusters$DAGs[2]
german_clusters$DAGs[3]
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3][[1]])
SubGroupSeparation:::plot_dag(german_clusters$DAGs[3][[1]])
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[3][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[3][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[1][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[1][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
german_clusters$assignprogress
length(german_clusters$DAGs)
as.integer(1.1)
as.integer(1.5)
as.integer(1.9)
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for(1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
# for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
# }
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
print(1)
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (ii in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[ii][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters(german_clusters)
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=0.5, edgepf=8))
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=0.5, edgepf=8))
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=1, edgepf=8))
plot_clusters(german_clusters)
plot_clusters(german_clusters)
german_clusters2 <- netClust::get_clusters(data_adult_binarized)
adult_clusters <- german_clusters2
plot_clusters(adult_clusters)
plot_clusters(adult_clusters)
head(data_adult_binarized)
dim(data_adult_binarized)
dim(data_compas_binerized)
dim(data_german_binerized)
# learn clusters
compas_clusters <- netClust::get_clusters(data_compas_binerized)
netClust::get_clusters
# plot clusters
plot_clusters(compas_clusters)
# plot clusters
plot_clusters(compas_clusters)
saveRDS(german_clusters, "results/german_clusters.rds")
saveRDS(german_clusters, "/results/german_clusters.rds")
saveRDS(german_clusters, "results/german_clusters.rds")
setwd("/Users/frbayer/Desktop/LearnFairNB-master")
saveRDS(german_clusters, "results/german_clusters.rds")
setwd("/Users/frbayer/Documents/phd_main/projects/causal_fair_clustering")
saveRDS(german_clusters, "results/german_clusters.rds")
# save results
saveRDS(adult_clusters, "results/adult_clusters.rds")
saveRDS(compas_clusters, "results/compas_clusters.rds")
saveRDS(german_clusters, "results/german_clusters.rds")
aa <- readRDS("results.adult_clusters.rds")
aa <- readRDS("results/adult_clusters.rds")
aa$DAGs[[1]]
pressure
cars
if (!require('SubGroupSeparation')) install.packages('SubGroupSeparation'); library('SubGroupSeparation')
library("devtools")
install.packages('devtools')
library('SubGroupSeparation')
if (!require('SubGroupSeparation')) install_github('SubGroupSeparation'); library('SubGroupSeparation')
require('SubGroupSeparation')
!require('SubGroupSeparation'))
install_github('SubGroupSeparation')
devtools::install_github('SubGroupSeparation')
library('devtools')
install_github('SubGroupSeparation')
install_github('cbg-ethz/SubGroupSeparation')
graph
install.packages("graph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
BiocManager::install("RBGL")
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
BiocManager::install('RBGL','Rgraphviz')
BiocManager::install('Rgraphviz')
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
library('SubGroupSeparation')
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("graph"); BiocManager::install('RBGL'); BiocManager::install('Rgraphviz')
if (!require('devtools')) install.packages('devtools')
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation')
if (!require("graph")) BiocManager::install("graph")
library('RBGL')
require("RBGL")
(!require("RBGL"))
BiocManager::install("graph")
library()
library(devtools)
devtools::document()
devtools::document()
library(devtools)
plot_clusters
netClust::plot_clusters
netClust::plot_clusters
devtools::check()
ggdag
library(ggdag
)
dag  <- dagify(y ~ x + z2 + w2 + w1,
x ~ z1 + w1,
z1 ~ w1 + v,
z2 ~ w2 + v,
w1 ~~ w2)
ggdag(
.tdy_dag,
...,
edge_type = "link_arc",
node_size = 16,
text_size = 3.88,
label_size = text_size,
text_col = "white",
label_col = "black",
node = TRUE,
stylized = FALSE,
text = TRUE,
use_labels = NULL
)
ggdag
library(ggdag)
use_cran_comments(open = rlang::is_interactive())
devtools::check()
devtools::check()
devtools::check()
start_time <- Sys.time()
sleep_for_a_minute()
start_time <- Sys.time()
sleep_for_a_minute()
start_time <- Sys.time()
1*400
end_time - start_time
start_time <- Sys.time()
1*400
end_time <- start_time
start_time -start_time
start_time - end_time
start_time - end_time
start_time <- Sys.time()
1*400
end_time <- start_time
print(start_time-end_time)
start_time <- Sys.time()
1*400
end_time <- start_time
print(start_time-end_time)
print(start_time-end_time)
start_time
start_time <- Sys.time()
end_time <- Sys.time()
print(start_time-end_time)
as.numeric(start_time-end_time)
print(end_time-start_time)
print(start_time-end_time)
print(paste0(as.numeric(start_time-end_time)))
print(paste0(as.numeric(start_time-end_time)))
print(paste0(as.numeric(end_time-start_time)))
print(paste0("Computation time: ",as.numeric(end_time-start_time)))
print(paste0("Computation time: ",as.numeric(end_time-start_time)))
print(paste0("Computation time in seconds: ",as.numeric(end_time-start_time)))
print(paste0("Computation time: ",as.numeric(end_time-start_time)))
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
my_data <- netClust::sampleData(kclust = kclusters, Nvars = 20, sseed = 2, samplesizes = ss)
library(netClust)
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
my_data <- netClust::sampleData(kclust = kclusters, Nvars = 20, sseed = 2, samplesizes = ss)
sampleData(kclust = kclusters, Nvars = 20, sseed = 2, samplesizes = ss)
sampleData(kclust = kclusters, Nvars = 20, sseed = 2, samplesizes = ss)
sampleData
netClust:::sampleData
netClust:::sampleData
netClust:::sampleData
netClust:::get_clusters
netClust::get_clusters
set.seed(1)
k_clust <- 2
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_results
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
## cluster with covariate-adjusted framework
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=1)
netClust::get_clusters
netClust::netCluster
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=1)
end_time <- Sys.time()
delta_time <- start_time-end_time
delta_time
delta_time
delta_time <- end_time-start_time
delta_time
delta_time_nonparallel/delta_time_parallel
k_clust <- 2
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=1)
end_time <- Sys.time()
delta_time_parallel <- start_time-end_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=1)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- delta_time_nonparallel/delta_time_parallel
delta_time_nonparallel
delta_time_parallel
delta_time_nonparallel/delta_time_parallel
as.numeric(delta_time_nonparallel)
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction
difference
delta_time_nonparallel
delta_time_parallel
k_clust <- 2
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list
fraction_list1 <- fraction_list
difference_list1 <- difference_list
difference_list
k_clust <- 8
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list1
fraction_list1[1,2,3,5,7,9]
fraction_list1[c(1,2,3,5,7,9)]
average(fraction_list1[c(1,2,3,5,7,9)])
mean(fraction_list1[c(1,2,3,5,7,9)])
fraction_list1[c(1,2,3,5,7,9)]
difference_list1[c(1,2,3,5,7,9)]
k_clust <- 4
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list
