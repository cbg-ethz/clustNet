setwd("~/Documents/phd_main/projects/pancancer-clustering-master/packages/network-clustering/graphClust")
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)
read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
data <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
remove(data)
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
head(mutCovData)
colnames(mutCovData)
colnames(mutCovData)[1:201]
colnames(mutCovData)
colnames(mutCovData)[202:227]
colnames(mutCovData)[202:228]
colnames(mutCovData)[202:227]
genes <- colnames(mutCovData)[1:201]
covariates <- colnames(mutCovData)[202:227]
Ngenes <- 201
colnames(mutCovData)[(Ngenes+1):]
colnames(mutCovData)[(Ngenes+1):end]
dim[colnames(mutCovData)]
length[colnames(mutCovData)]
tail(colnames(mutCovData))
head(colnames(mutCovData))
head(colnames(mutCovData), 202)
head(colnames(mutCovData), 201)
genes <- head(colnames(mutCovData), Ngenes)
tail(colnames(mutCovData), Ngenes)
tail(c(1,2,3),2)
?ttail
??ttail
colnames(mutCovData)
colnames(mutCovData)
length(colnames(mutCovData))
Nvar <- length(colnames(mutCovData))
tail(colnames(mutCovData), Ncov)
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
tail(colnames(mutCovData), Ncov)
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
covariates
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
library("devtools")
install_github("fritzbayer/netClust", auth_token="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")
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
library(netClust)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
traceback()
mutCovData
mutCovData[1,1]
mutCovData[1,2]
mutCovData
netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
traceback()
devtools::check()
devtools::document()
devtools::check()
rhub::check_for_cran()
install.packages('rhub')
library(rhub)
rhub::check_for_cran()
rhub::check_for_cran()
install.packages('rhub')
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
rhub::check_for_cran()
library(netClust)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
library(parallel)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
library(netClust)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
netClusterParallel
clusterRes
library("devtools")
install_github("fritzbayer/netClust", auth_token="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")
library(netClust)
library(parallel)
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust",
repos = NULL,
type = "source")
library(netClust)
library(parallel)
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:2)
clusterRes <- netClusterParallel(mutCovData, kclust=2,nbg=0,itLim=100, EMseeds=1:2)
clusterRes <- netClusterParallel(mutCovData, kclust=22,nbg=0,itLim=100, EMseeds=1:5)
netCluster(mutCovData, kclust=22,nbg=0,itLim=100)
traceback()
length(EMseeds)
load_all()
clusterRes <- netCluster(mutCovData, kclust=22,nbg=0,itLim=100)
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
traceback()
BBMMClust
netCluster(mutCovData,kclust=3,nbg=0,itLim=20)
netClusterParallel
netCluster(mutCovData,kclust=3,nbg=0,itLim=20)
traceback()
netCluster(mutCovData,kclust=3,nbg=0,itLim=2)
myData
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
trace()
traceback()
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
traceback()
devtools::document()
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
library(netClust)
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
devtools::document()
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
traceback()
BBMMclusterEM(myData,1,3,1,10,TRUE)
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
library(netClust)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
traceback()
remove.packages(netClust)
remove.packages("netClust")
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
allrelativeprobs
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
traceback()
install.packages("/Users/frbayer/Documents/phd_main/packages/netClust", repos = NULL, type = "source")
library(netClust)
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
clusterRes <- netCluster(mutCovData, kclust=22,nbg=0,itLim=100)
netCluster(mutCovData,kclust=3,nbg=0,itLim=20)
clusterRes <- netCluster(mutCovData, kclust=22,nbg=0,itLim=100)
clusterRes
clusterRes
# Simulate binary data
ss <- c(400,500,600) # samples in each cluster
myData <- sampleData(kclust = 3, Nvars = 20, sseed = 2, samplesizes = ss)
# Network-based clustering
clusterRes <- netCluster(myData, kclust = 3)
clusterRes
write.csv
table(DAG = 1, assignment = c(1, 2))
table("DAG" = 1, "assignment" = c(1, 2))
!require(argparse)
mutCovData[,1:Ngenes]
dim(mutCovData[,1:Ngenes])
mutData <- mutCovData[,1:Ngenes]
Ncov
load("/Users/frbayer/Desktop/clusterRes.rds")
load("/Users/frbayer/Desktop/clusterRes.rds")
write.csv
write.csv(list("A"=1,"B"=c(1,2)),"/Users/frbayer/Documents/phd_main/projects/network-based-clustering/R-workflow/test.csv")
read.csv("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/R-workflow/test.csv")
BiDAG::scoreparameters
BiDAG::scoreagainstDAG
BiDAG::scoreparameters
interactions
getwd()
setwd("~/Documents/phd_main/projects/network-based-clustering/R-workflow")
edgepmat <- read.table("data/string-network.txt")
edgepmat <- read.table("data/string-network.txt")
edgepmat
edgenames(edgepmat)
rownames(edgepmat)
genes
match(genes, rownames(edgepmat))
match(rownames(edgepmat),genes)
length(genes)
length(rownames(edgepmat))
unique(genes, rownames(edgepmat))
length(unique(genes, rownames(edgepmat)))
length(union(genes, rownames(edgepmat)))
length(intersect(genes, rownames(edgepmat)))
length(intersect(genes, rownames(edgepmat)))
match(intersect(genes, rownames(edgepmat)))
match(genes, rownames(edgepmat))
match(rownames(edgepmat),genes)
is.na(match(rownames(edgepmat),genes))
which(is.na(match(rownames(edgepmat),genes)))
edgepmat
edgepmatAll <- matrix(Nvar,Nvar)
edgepmatAll
edgepmatAll <- matrix(0,Nvar,Nvar)
edgepmatAll
genes
edgepmatAll <- matrix(0,Nvar,Nvar)
colnames(edgepmatAll) <- colnames(mutCovData)
colnames(edgepmatAll)
rownames(edgepmatAll) <- colnames(mutCovData)
edgepmatAll
rownames(edgepmat)
colnames(edgepmat)
rownames(edgepmat)
(colnames(mutCovData),rownames(edgepmat))
match(colnames(mutCovData),rownames(edgepmat))
colnames(mutCovData)
edgepmat
edgepmat
match(colnames(mutCovData),rownames(edgepmat))
install.packages(graph4lg)
install.packages("graph4lg")
library("graph4lg")
graph4lg::reorder_mat(edgepmat, length(edgepmatAll):1)
edgepmat
dim(edgepmat)
as.matrix(edgepmat)
graph4lg::reorder_mat(as.matrix(edgepmat), length(edgepmatAll):1)
length(edgepmatAll):1
dim(edgepmat)[1]:1
graph4lg::reorder_mat(as.matrix(edgepmat), dim(edgepmat)[1]:1)
dim(edgepmat)[1]:1
graph4lg::reorder_mat(as.matrix(edgepmat), c(dim(edgepmat)[1]:1))
c(dim(edgepmat)[1]:1)
edgepmat
graph4lg::reorder_mat(as.matrix(edgepmat), rownames(edgepmat))
as.matrix(edgepmat)
rownames(edgepmat)
library("igraph")
library("graph4lg")
remove.packages("graph4lg")
remove("graph4lg")
library("igraph")
igraph::graph_from_adjacency_matrix()
igraph::graph_from_adjacency_matrix(edgepmat)
edgepmat <- as.matrix(read.table("data/string-network.txt"))
igraph::graph_from_adjacency_matrix(edgepmat)
igraph::graph_from_adjacency_matrix(edgepmatAll)
a <- igraph::graph_from_adjacency_matrix(edgepmat)
b <- igraph::graph_from_adjacency_matrix(edgepmatAll)
union(a,b)
as_adjacency_matrix(c)
c <- union(a,b)
as_adjacency_matrix(c)
as.matrix(as_adjacency_matrix(c))
d <- as.matrix(as_adjacency_matrix(c))
rownames(d)
unique(rownames(d))
unique(rownames(d))
colnames(mutCovData)
match(colnames(mutCovData),rownames(edgepmat))
match(rownames(edgepmat),colnames(mutCovData))
match( c(1,2),c(2,3,4,5)
match( c(1,2),c(2,3,4,5)
)
match( c(1,2),c(2,3,4,5))
rownames(edgepmat)
setdiff(c(1,2),c(2,3,4,5))
setdiff(colnames(mutCovData),rownames(edgepmat))
dim(setdiff(c(1,2),c(2,3,4,5)))
length(setdiff(c(1,2),c(2,3,4,5)))
length(setdiff(c(1,2),c(2,3,4,5)))
length(setdiff(colnames(mutCovData),rownames(edgepmat)))
match(rownames(edgepmat),colnames(mutCovData))
dim(edgepmat)[1]
175-11+62
176-11+62
Ncov
length(setdiff(colnames(mutCovData),rownames(edgepmat)))
setdiff(colnames(mutCovData),rownames(edgepmat))
match(rownames(edgepmat),colnames(mutCovData))
setdiff(colnames(mutCovData),rownames(edgepmat))
length(helpNames)
helpNames <- setdiff(colnames(mutCovData),rownames(edgepmat))
length(helpNames)
helpNames <- setdiff(colnames(mutCovData),rownames(edgepmat))
Nhelp <- length(helpNames)
helpNames <- setdiff(colnames(mutCovData),rownames(edgepmat))
Nhelp <- length(helpNames)
helpMat <- matrix(0,Nhelp,Nhelp)
colnames(helpMat) <- helpNames
rownames(helpMat) <- helpNames
helpMat
c
unique(rownames(d))
length(unique(rownames(d)))
length(mutCovData)
Nvar+Ncov
Nvar
rownames(edgepmat)
setdiff(rownames(edgepmat),rownames(mutCovData))
setdiff(c(1,2),c(2,3,4))
setdiff(rownames(edgepmat),rownames(mutCovData))
rownames(edgepmat)
rownames(mutCovData)
setdiff(colnames(edgepmat),colnames(mutCovData))
irrelevantEdges <- setdiff(colnames(edgepmat),colnames(mutCovData))
irrelevantV <- setdiff(colnames(edgepmat),colnames(mutCovData))
string <- as.matrix(read.table("data/string-network.txt"))
stringIG <- igraph::graph_from_adjacency_matrix(edgepmat)
string <- as.matrix(read.table("data/string-network.txt"))
irrelevantV <- setdiff(colnames(edgepmat),colnames(mutCovData))
stringIG <- igraph::graph_from_adjacency_matrix(edgepmat)
stringIG <- delete_vertices(stringIG, irrelevantV)
stringIG
length(stringIG)
string <- as.matrix(read.table("data/string-network.txt"))
irrelevantV <- setdiff(colnames(edgepmat),colnames(mutCovData))
stringIG <- igraph::graph_from_adjacency_matrix(edgepmat)
string <- as.matrix(read.table("data/string-network.txt"))
irrelevantV <- setdiff(colnames(string),colnames(mutCovData))
stringIG <- igraph::graph_from_adjacency_matrix(string)
stringIG
stringIG <- delete_vertices(stringIG, irrelevantV)
stringIG
stringIG <- delete_vertices(stringIG, irrelevantV)
irrelevantV
edgepmatAllIG <- igraph::graph_from_adjacency_matrix(edgepmatAll)
edgepmatAllIG
edgepmatAllIG <- igraph::graph_from_adjacency_matrix(edgepmatAll)
edgepmatAll
edgepmatAll
edgepmatAll <- matrix(0,Nvar,Nvar)
colnames(edgepmatAll) <- colnames(mutCovData)
rownames(edgepmatAll) <- colnames(mutCovData)
edgepmatAllIG <- igraph::graph_from_adjacency_matrix(edgepmatAll)
combinedIG <- igraph::union(stringIG,edgepmatAllIG)
combinedIG
as.matrix(as_adjacency_matrix(combinedIG))
combined <- as.matrix(as_adjacency_matrix(combinedIG))
dim(combined)
Nvar
rownames(combined)
rownames(edgepmatAll)
combined
combinedIG
combinedIG$name
combinedIG$names
combinedIG[1]
combinedIG
combinedIG[[1]]
combinedIG[[1]]$XYLT2
V(combinedIG)
V(combinedIG)$names
V(combinedIG)
V(combinedIG)$name
combinedIG <- igraph::union(edgepmatAllIG,stringIG)
combinedIG <- igraph::union(edgepmatAllIG,stringIG)
combined <- as.matrix(as_adjacency_matrix(combinedIG))
rowname(combined)
rownames(combined)
colnames(mutCovData)
rownames(combined)==colnames(mutCovData)
combined
colnames(combined)==colnames(mutCovData)
read.table("data/string-network.txt")
write.table(edgepmat, "data/string-edgepmat.txt")
# check whether sorting is correct
colnames(edgepmat)==colnames(mutCovData)
library("igraph")
# load STRING graph and remove irrelevant variables
string <- as.matrix(read.table("data/string-network.txt"))
irrelevantV <- setdiff(colnames(string),colnames(mutCovData))
stringIG <- igraph::graph_from_adjacency_matrix(string)
stringIG <- delete_vertices(stringIG, irrelevantV)
# create empty graph including all variabels
edgepmatAll <- matrix(0,Nvar,Nvar)
colnames(edgepmatAll) <- colnames(mutCovData)
rownames(edgepmatAll) <- colnames(mutCovData)
edgepmatAllIG <- igraph::graph_from_adjacency_matrix(edgepmatAll)
# combine graphs (empty and STRING)
combinedIG <- igraph::union(edgepmatAllIG,stringIG)
edgepmat <- as.matrix(as_adjacency_matrix(combinedIG))
write.table(edgepmat, "data/string-edgepmat.txt")
# check whether sorting is correct
colnames(edgepmat)==colnames(mutCovData)
write.table(edgepmat, "data/string-edgepmat.txt")
# check whether sorting is correct
colnames(edgepmat)==colnames(mutCovData)
mutCovData <- read.table("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/snakemake-workflow/data/binary-mutationCovariate-matrix.txt")
stringEdgepmat <- as.matrix(read.table("data/string-edgepmat.txt"))
stringEdgepmat
library("devtools")
install_github("fritzbayer/netClust", auth_token="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")
library(netClust)
mutCovData <- read.table("data/binary-mutationCovariate-matrix.txt")
stringEdgepmat <- as.matrix(read.table("data/string-edgepmat.txt"))
Nvar <- length(colnames(mutCovData))
Ngenes <- 201
Ncov <- Nvar-Ngenes
genes <- head(colnames(mutCovData), Ngenes)
covariates <- tail(colnames(mutCovData), Ncov)
mutData <- mutCovData[,1:Ngenes]
# clustering
clusterResPlain <- netClusterParallel(mutCovData, kclust = 22, nbg = 0,itLim = 20, EMseeds = 1:10, edgepmat = stringEdgepmat)
setwd("~/Documents/phd_main/packages/netClust")
devtools::document()
devtools::document()
traceback()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
load_all()
devtools::document()
devtools::check()
