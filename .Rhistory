res1 <- readRDS("results--k_clust-6--n_vars-20--n_bg-0--n_it-30--different--TRUE.rds")
nice_plot(res1$correct_samples)
nbg_data <- melt(res1$correct_samples[,1:3])
nbg_data$nbg <- 0
res2 <- readRDS("results--k_clust-6--n_vars-20--n_bg-2--n_it-30--different--TRUE.rds")
nice_plot(res2$correct_samples)
nbg_data_temp <- melt(res2$correct_samples[,1:3])
nbg_data_temp$nbg <- 2
nbg_data <- rbind(nbg_data,nbg_data_temp)
res3 <- readRDS("results--k_clust-6--n_vars-20--n_bg-4--n_it-30--different--TRUE.rds")
nbg_data_temp <- melt(res3$correct_samples[,1:3])
nice_plot1 <- nice_plot(res3$correct_samples)
nbg_data_temp$nbg <- 4
nbg_data <- rbind(nbg_data,nbg_data_temp)
res4 <- readRDS("results--k_clust-6--n_vars-20--n_bg-6--n_it-30--different--TRUE.rds")
nice_plot(res4$correct_samples)
nbg_data_temp <- melt(res4$correct_samples[,1:3])
nbg_data_temp$nbg <- 6
nbg_data <- rbind(nbg_data,nbg_data_temp)
# res5 <- readRDS("results--k_clust-6--n_vars-20--n_bg-8--n_it-30--different--TRUE.rds")
# nice_plot(res5$correct_samples)
# nbg_data_temp <- melt(res5$correct_samples[,1:3])
# nbg_data_temp$nbg <- 8
# nbg_data <- rbind(nbg_data,nbg_data_temp)
# res6 <- readRDS("results--k_clust-6--n_vars-20--n_bg-10--n_it-30--different--TRUE.rds")
# nice_plot(res6$correct_samples)
# nbg_data_temp <- melt(res6$correct_samples[,1:3])
# nbg_data_temp$nbg <- 10
# nbg_data <- rbind(nbg_data,nbg_data_temp)
# res7 <- readRDS("results--k_clust-6--n_vars-20--n_bg-14--n_it-30--different--TRUE.rds")
# nice_plot(res7$correct_samples)
# nbg_data_temp <- melt(res7$correct_samples[,1:3])
# nbg_data_temp$nbg <- 14
# nbg_data <- rbind(nbg_data,nbg_data_temp)
colnames(nbg_data)[2] <- "Method"
plot_nbg <- ggplot2::ggplot(data=nbg_data, aes(x=factor(nbg), y=value, fill = Method, colour = Method))+
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
# geom_point(pch = 21, position = position_jitterdodge(0.15), cex = 0.4, alpha = 0.3) +
# geom_jitter(pch = 21, cex = 0.8, alpha = 0.3) +
geom_point(position = position_jitterdodge(), alpha = 0.3, pch = 21, cex = 0.9) +
scale_colour_manual(values = cols) + scale_fill_manual(values = cols) +
labs(y = "Adjusted Rand Index (ARI)", x = "Number of Covariates") +
theme_minimal(); plot_nbg
res1 <- readRDS("results--k_clust-6--n_vars-20--n_bg-0--n_it-30--different--TRUE.rds")
nice_plot(res1$correct_samples)
nbg_data <- melt(res1$correct_samples[,2:9])
nbg_data$nbg <- 0
res2 <- readRDS("results--k_clust-6--n_vars-20--n_bg-2--n_it-30--different--TRUE.rds")
nice_plot(res2$correct_samples)
nbg_data_temp <- melt(res2$correct_samples[,2:9])
nbg_data_temp$nbg <- 2
nbg_data <- rbind(nbg_data,nbg_data_temp)
res3 <- readRDS("results--k_clust-6--n_vars-20--n_bg-4--n_it-30--different--TRUE.rds")
nbg_data_temp <- melt(res3$correct_samples[,2:9])
nbg_data_temp$nbg <- 4
nbg_data <- rbind(nbg_data,nbg_data_temp)
nice_plot(res3$correct_samples)
res4 <- readRDS("results--k_clust-6--n_vars-20--n_bg-6--n_it-30--different--TRUE.rds")
nice_plot(res4$correct_samples)
nbg_data_temp <- melt(res4$correct_samples[,2:9])
nbg_data_temp$nbg <- 6
nbg_data <- rbind(nbg_data,nbg_data_temp)
colnames(nbg_data)[2] <- "Method"
ggplot2::ggplot(data=nbg_data, aes(x=reorder(nbg, value), y=value, fill = Method, colour = Method))+
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
# geom_point(pch = 21, position = position_jitterdodge(0.15), cex = 0.4, alpha = 0.3) +
# geom_jitter(pch = 21, cex = 0.8, alpha = 0.3) +
geom_point(position = position_jitterdodge(), alpha = 0.3, pch = 21, cex = 0.9) +
scale_colour_manual(values = cols[2:9]) + scale_fill_manual(values = cols[2:9]) +
labs(y = "Adjusted Rand Index (ARI)", x = "Number of Covariates") +
theme_minimal()
samples <- res3$correct_samples[,2:9]
test_data <- melt(samples)
test_data$Var3 <- c(rep("netClust", 2*dim(samples)[1]),
rep("kmeans", 2*dim(samples)[1]), rep("Mclust", 2*dim(samples)[1]),
rep("BMM", 2*dim(samples)[1]))
color_list <- RColorBrewer::brewer.pal(n = 4, name = "RdYlBu")
cols <- color_list[c(3, 4, 3, 4, 3, 4, 3, 4)]
names(test_data) <- c("Var1", "Method", "value", "Var3")
temp_plot <- ggplot2::ggplot(data=test_data, aes(x=reorder(Var3, -value), y=value, fill = Method, colour = Method))+
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
# geom_point(pch = 21, position = position_jitterdodge(0.15), cex = 0.4, alpha = 0.3) +
geom_jitter(pch = 21, cex = 0.8, alpha = 0.3) +
# geom_point(position = position_jitterdodge(), alpha = 0.3, pch = 21, cex = 0.9) +
scale_colour_manual(values = cols) + scale_fill_manual(values = cols) +
labs(y = "Adjusted Rand Index (ARI)", x = "Method") +
theme_minimal()+
theme(legend.position = "none")
temp_plot
p_other <- ggarrange(temp_plot, legend_1, widths=c(0.75,0.25))
p_other
# save
png("~/Desktop/plot_other.png", width = 14, height = 12, units = 'cm', res = 300)
p_other
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
p_other <- ggarrange(temp_plot, legend_1, widths=c(0.65,0.35))
# save
png("~/Desktop/plot_other.png", width = 14, height = 12, units = 'cm', res = 300)
p_other
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
p_other <- ggarrange(temp_plot, legend_1, widths=c(0.7,0.3))
# save
png("~/Desktop/plot_other.png", width = 14, height = 12, units = 'cm', res = 300)
p_other
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
## plot netClust versions for different numbers of covariates
res1 <- readRDS("results--k_clust-6--n_vars-20--n_bg-0--n_it-30--different--TRUE.rds")
nice_plot(res1$correct_samples)
nbg_data <- melt(res1$correct_samples[,1:3])
nbg_data$nbg <- 0
res2 <- readRDS("results--k_clust-6--n_vars-20--n_bg-2--n_it-30--different--TRUE.rds")
nice_plot(res2$correct_samples)
nbg_data_temp <- melt(res2$correct_samples[,1:3])
nbg_data_temp$nbg <- 2
nbg_data <- rbind(nbg_data,nbg_data_temp)
res3 <- readRDS("results--k_clust-6--n_vars-20--n_bg-4--n_it-30--different--TRUE.rds")
nbg_data_temp <- melt(res3$correct_samples[,1:3])
nice_plot1 <- nice_plot(res3$correct_samples)
nbg_data_temp$nbg <- 4
nbg_data <- rbind(nbg_data,nbg_data_temp)
res4 <- readRDS("results--k_clust-6--n_vars-20--n_bg-6--n_it-30--different--TRUE.rds")
nice_plot(res4$correct_samples)
nbg_data_temp <- melt(res4$correct_samples[,1:3])
nbg_data_temp$nbg <- 6
nbg_data <- rbind(nbg_data,nbg_data_temp)
# save
png("~/Desktop/plot_nice.png", width = 14, height = 12, units = 'cm', res = 300)
nice_plot1
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
colnames(nbg_data)[2] <- "Method"
plot_nbg <- ggplot2::ggplot(data=nbg_data, aes(x=factor(nbg), y=value, fill = Method, colour = Method))+
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
# geom_point(pch = 21, position = position_jitterdodge(0.15), cex = 0.4, alpha = 0.3) +
# geom_jitter(pch = 21, cex = 0.8, alpha = 0.3) +
geom_point(position = position_jitterdodge(), alpha = 0.3, pch = 21, cex = 0.9) +
scale_colour_manual(values = cols) + scale_fill_manual(values = cols) +
labs(y = "Adjusted Rand Index (ARI)", x = "Number of Covariates") +
theme_minimal(); plot_nbg
png("~/Desktop/plot_nbg.png", width = 14, height = 12, units = 'cm', res = 300)
plot_nbg
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
png("~/Desktop/plot_nbg.png", width = 14, height = 12, units = 'cm', res = 300)
plot_nbg
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
# get label
cols <- color_list[c(1, 3, 4, 3, 4, 3, 4, 3, 4)]
colnames(nbg_data)[2] <- "Method"
plot_nbg <- ggplot2::ggplot(data=nbg_data, aes(x=factor(nbg), y=value, fill = Method, colour = Method))+
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
# geom_point(pch = 21, position = position_jitterdodge(0.15), cex = 0.4, alpha = 0.3) +
# geom_jitter(pch = 21, cex = 0.8, alpha = 0.3) +
geom_point(position = position_jitterdodge(), alpha = 0.3, pch = 21, cex = 0.9) +
scale_colour_manual(values = cols) + scale_fill_manual(values = cols) +
labs(y = "Adjusted Rand Index (ARI)", x = "Number of Covariates") +
theme_minimal(); plot_nbg
# save
png("~/Desktop/plot_nbg.png", width = 14, height = 12, units = 'cm', res = 300)
plot_nbg
#don't forget to embed fonts.
#embed_fonts("plotname.pdf", outfile = "plotname_embed.pdf")
dev.off()
setwd("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/R-workflow")
mutCovData <- read.table("data/binary-mutationCovariate-matrix.txt")
output <- read.table("data/tcga-clinical-information.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# clusterResMut <- readRDS("clustering/results/test/clusterResCond_i200_s1.rds")
clusterResMut <- readRDS("clustering/results/test/clusterResMut_i200_s1-1.rds")
cluster.membership <- data.frame("id"=rownames(mutCovData),"groupM"=clusterResMut$clustermembership)
# Change group from 1:22 to A:V
cluster.membership$groupM <- as.factor(cluster.membership$groupM)
levels(cluster.membership$groupM) <- LETTERS[1:length(unique(cluster.membership$groupM))]
# Merge clinical data with clustering
clinical <- merge(output,cluster.membership, by="id", sort=FALSE)
colnames(clinical)[colnames(clinical)=="type"] <- "tissue"
# check how many samples are in each cluster/group
table(clinical$groupM)
clinincal_glioma_GBM <- clinical[which(c(clinical$tissue=="GBM")),]
clinincal_glioma_LGG <- clinical[which(c(clinical$tissue=="LGG")),]
# show clusters
table(clinincal_glioma_GBM$groupM)
table(clinincal_glioma_LGG$groupM)
# filder data to I and G
clinincal_glioma_GBM_reduced <- clinincal_glioma_GBM[c(which(clinincal_glioma_GBM$groupM=="H"),which(clinincal_glioma_GBM$groupM=="I")),]
clinincal_glioma_LGG_reduced <- clinincal_glioma_LGG[c(which(clinincal_glioma_LGG$groupM=="H"),which(clinincal_glioma_LGG$groupM=="I")),]
# plot survival curves
km_fit <- survfit(Surv(time, event) ~ groupM, data=clinincal_glioma_GBM_reduced)
autoplot(km_fit)
km_fit <- survfit(Surv(time, event) ~ groupM, data=clinincal_glioma_LGG_reduced)
autoplot(km_fit)
PTEN, IDH1, EGFR, NF2, FLT3, IDH2, CIC, TNRC18
dag_gbm <- clusterResMut$DAGs[9][[1]]
dag_lgg <- clusterResMut$DAGs[8][[1]]
plot(dag_gbm)
plot_dag(dag_gbm)
plot_dag(dag_gbm)
plot_dag(dag_lgg)
plot_dag(dag_lgg)
plot_dag(clusterResMut$DAGs[7][[1]])
plot_dag(clusterResMut$DAGs[1][[1]])
plot_dag(clusterResMut$DAGs[2][[1]])
plot_dag(clusterResMut$DAGs[3][[1]])
plot_dag(clusterResMut$DAGs[4][[1]])
plot_dag(clusterResMut$DAGs[5][[1]])
plot_dag(clusterResMut$DAGs[6][[1]])
plot_dag(clusterResMut$DAGs[7][[1]])
plot_dag(clusterResMut$DAGs[8][[1]])
plot_dag(clusterResMut$DAGs[9][[1]])
plot_dag(clusterResMut$DAGs[10][[1]])
plot_dag(clusterResMut$DAGs[11][[1]])
plot_dag(clusterResMut$DAGs[12][[1]])
plot_dag(clusterResMut$DAGs[13][[1]])
plot_dag(clusterResMut$DAGs[14][[1]])
plot_dag(clusterResMut$DAGs[15][[1]])
plot_dag(clusterResMut$DAGs[16][[1]])
plot_dag(clusterResMut$DAGs[17][[1]])
plot_dag(clusterResMut$DAGs[18][[1]])
plot_dag(clusterResMut$DAGs[19][[1]])
plot_dag(clusterResMut$DAGs[20][[1]])
plot_dag(clusterResMut$DAGs[21][[1]])
plot_dag(clusterResMut$DAGs[22][[1]])
plot_dag(clusterResMut$DAGs[23][[1]])
install.packages("https://www.bnlearn.com/releases/bnlearn_latest.tar.gz", repos = NULL, type = "source")
library(bnlearn)
library(umap)
install.packages("umap")
library(umap)
setwd("/Users/frbayer/Documents/phd_main/projects/network-based-clustering/R-workflow")
mutCovData <- read.table("data/binary-mutationCovariate-matrix.txt")
mutCovData.umap = umap(mutCovData)
library(umap)
install.packages("umap")
library(umap)
mutCovData.umap = umap(mutCovData)
mutCovData.umap
plot.mutCovData(mutCovData.umap, iris.labels)
plot(mutCovData.umap)
head(mutCovData.umap)
plot(mutCovData.umap$layout)
par(mfrow = c(1,1))
plot(mutCovData.umap$layout)
plot(mutCovData.umap$layout)
mutCovData.umap$knn
head(mutCovData.umap$knn)
mutCovData.umap$knn$indexes
mutCovData.umap$knn$distances
mutCovData.umap$knn
knn
knn.impute
mutCovData.umap$knn
mutCovData.umap$knn$indexes
max(mutCovData.umap$knn$indexes)
min(mutCovData.umap$knn$indexes)
mutCovData.umap$knn$indexes
library(umap)
install.packages("umap")
mutCovData.umap$config
mutCovData.umap$layout
kmeans(mutCovData.umap$layout)
mutCovData.umap$layout[1,]
mutCovData.umap$layout[1,]
mutCovData.umap$layout[,1]
mutCovData.umap$layout[1,]
mutCovData.umap$layout[2,]
mutCovData.umap$layout[100,]
mutCovData.umap$layout[1000,]
kmeans(mutCovData.umap$layout)
kmeans(mutCovData.umap$layout,23)
aa <- kmeans(mutCovData.umap$layout,23)
aa$cluster
library(survival)
library(RColorBrewer)
## load data ##
output <- read.table("data/tcga-clinical-information.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
clusterResMut <- readRDS("results/clusterResMutS.rds")
clusterResMut
aaa <- list()
aaa$clustermembership <- aa
sinlge_cox_analysis
sinlge_cox_analysis(aaa,mutCovData, output)
sinlge_cox_analysis(readRDS("clustering/results/test/clusterResCond_i200_s1.rds"),mutCovData, output)
aaa$clustermembership
aaa$clustermembership$cluster
as.character(aaa$clustermembership$cluster)
aaa$clustermembership <-  as.character(aaa$clustermembership$cluster)
aaa$clustermembership
clusterResMut$clustermembership
aaa$clustermembership <-  as.numeric(aaa$clustermembership$cluster)
aaa$clustermembership <-  aa$cluster
aaa$clustermembership
unname(aaa$clustermembership)
clusterResMut$clustermembership
aaa$clustermembership <- unname(aaa$clustermembership)
sinlge_cox_analysis(aaa,mutCovData, output)
a <- list()
a$clustermembership <- sample(1:23, 1000)
a$clustermembership <- sample(1:23, 1000, replace = TRUE)
a$clustermembership <- sample(1:23, 1000, replace = TRUE)
length(aaa$clustermembership)
a$clustermembership <- sample(1:23, length(aaa$clustermembership))
a$clustermembership <- sample(1:23, length(aaa$clustermembership), replace = TRUE)
sinlge_cox_analysis(a,mutCovData, output)
sinlge_cox_analysis(a,mutCovData, output)
sinlge_cox_analysis(sample(1:23, length(aaa$clustermembership), replace = TRUE),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
sinlge_cox_analysis(list(clustermembership=sample(1:23, length(aaa$clustermembership), replace = TRUE)),mutCovData, output)
data1 <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_adult_binarized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_adult_binarized
head (data_adult_binarized)
head(data_adult_binarized)
dim(data_adult_binarized)
data_adult_binarized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/adult_binerized.csv")
data_compas_binerized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/compas_binerized.csv")
data_german_binerized <- read.csv("/Users/frbayer/Desktop/LearnFairNB-master/data/processed_data/german_binerized.csv")
dim(data_compas_binerized)
dim(data_german_binerized)
head(data_german_binerized)
head(data_compas_binerized)
library(netClust)
get_clusters
?get_clusters
library("devtools")
install_github("fritzbayer/netClust", auth_token="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")
german_clusters <- netClust::get_clusters(data_german_binerized)
plot_dag
library(SubGroupSeparation)
SubGroupSeparation:::plot_dag
SubGroupSeparation:::plot_dag(german_clusters$DAGs[1])
german_clusters$DAGs[1]
plot((german_clusters$DAGs[1]))
german_clusters$DAGs[1]
german_clusters$DAGs[2]
german_clusters$DAGs[3]
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3])
as.matrix(german_clusters$DAGs[3][[1]])
SubGroupSeparation:::plot_dag(german_clusters$DAGs[3][[1]])
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[3][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[3][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[1][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[1][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
german_clusters$assignprogress
length(german_clusters$DAGs)
as.integer(1.1)
as.integer(1.5)
as.integer(1.9)
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for(1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
# for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
# }
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
# par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (1 in 1:n_dags){
# SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[2][[1]]))
print(1)
}
# par(mfrow = c(1,1))
}
plot_clusters <- function(german_clusters){
n_dags <- length(german_clusters$DAGs)
par(mfrow = c(2, 1+as.integer(n_dags/2)))
for (ii in 1:n_dags){
SubGroupSeparation:::plot_dag(as.matrix(german_clusters$DAGs[ii][[1]]))
}
par(mfrow = c(1,1))
}
plot_clusters(german_clusters)
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=0.5, edgepf=8))
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=0.5, edgepf=8))
plot_clusters(german_clusters)
german_clusters <- netClust::get_clusters(data_german_binerized, bdepar = list(chi=1, edgepf=8))
plot_clusters(german_clusters)
plot_clusters(german_clusters)
german_clusters2 <- netClust::get_clusters(data_adult_binarized)
adult_clusters <- german_clusters2
plot_clusters(adult_clusters)
plot_clusters(adult_clusters)
head(data_adult_binarized)
dim(data_adult_binarized)
dim(data_compas_binerized)
dim(data_german_binerized)
# learn clusters
compas_clusters <- netClust::get_clusters(data_compas_binerized)
netClust::get_clusters
# plot clusters
plot_clusters(compas_clusters)
# plot clusters
plot_clusters(compas_clusters)
saveRDS(german_clusters, "results/german_clusters.rds")
saveRDS(german_clusters, "/results/german_clusters.rds")
saveRDS(german_clusters, "results/german_clusters.rds")
setwd("/Users/frbayer/Desktop/LearnFairNB-master")
saveRDS(german_clusters, "results/german_clusters.rds")
setwd("/Users/frbayer/Documents/phd_main/projects/causal_fair_clustering")
saveRDS(german_clusters, "results/german_clusters.rds")
# save results
saveRDS(adult_clusters, "results/adult_clusters.rds")
saveRDS(compas_clusters, "results/compas_clusters.rds")
saveRDS(german_clusters, "results/german_clusters.rds")
aa <- readRDS("results.adult_clusters.rds")
aa <- readRDS("results/adult_clusters.rds")
aa$DAGs[[1]]
pressure
cars
if (!require('SubGroupSeparation')) install.packages('SubGroupSeparation'); library('SubGroupSeparation')
library("devtools")
install.packages('devtools')
library('SubGroupSeparation')
if (!require('SubGroupSeparation')) install_github('SubGroupSeparation'); library('SubGroupSeparation')
require('SubGroupSeparation')
!require('SubGroupSeparation'))
install_github('SubGroupSeparation')
devtools::install_github('SubGroupSeparation')
library('devtools')
install_github('SubGroupSeparation')
install_github('cbg-ethz/SubGroupSeparation')
graph
install.packages("graph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
BiocManager::install("RBGL")
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
BiocManager::install('RBGL','Rgraphviz')
BiocManager::install('Rgraphviz')
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation'); library('SubGroupSeparation')
library('SubGroupSeparation')
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("graph"); BiocManager::install('RBGL'); BiocManager::install('Rgraphviz')
if (!require('devtools')) install.packages('devtools')
if (!require('SubGroupSeparation')) install_github('cbg-ethz/SubGroupSeparation')
if (!require("graph")) BiocManager::install("graph")
library('RBGL')
require("RBGL")
(!require("RBGL"))
BiocManager::install("graph")
library()
library(devtools)
devtools::document()
devtools::document()
