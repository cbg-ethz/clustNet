# sample data
sampled_results <- netClust:::sampleData(k_clust = k_clust, n_vars = n_vars, n_bg = n_bg, sseed = sseed)
sampled_data <- simulation_results$sampled_data
correct_samples <- cluster_benchmark(sampled_data, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 10)
traceback()
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = 0, nbg = n_bg, EMseeds=1)
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=1)
cluster_benchmark <- function(sampled_data, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 3)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu)
correct_samples1 <- max_match(sampled_results$cluster_membership,cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples2 <- max_match(sampled_results$cluster_membership,cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples3 <- max_match(sampled_results$cluster_membership,cluster_results3$clustermembership)
correct_samples[u,] <- c(correct_samples1, correct_samples2, correct_samples3)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
correct_samples <- cluster_benchmark(sampled_data, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 5)
cluster_benchmark <- function(sampled_data, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 3)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu)
correct_samples1 <- max_match(sampled_results$cluster_membership,cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples2 <- max_match(sampled_results$cluster_membership,cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples3 <- max_match(sampled_results$cluster_membership,cluster_results3$clustermembership)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
correct_samples <- cluster_benchmark(sampled_data, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 5)
correct_samples
correct_fraction <- correct_samples/(dim(sampled_data)[1])
correct_fraction
simulation_results$cluster_membership
cluster_benchmark
correct_samples
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 3)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
kmeans(sampled_data, 5)
aa <- kmeans(sampled_data, 5)
aa$centers
aa$cluster
max_match(sampled_membership, aa$cluster)
sampled_membership
sampled_data <- simulation_results$sampled_data
sampled_membership <- simulation_results$cluster_membership
max_match(sampled_membership, aa$cluster)
correct_samples
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
res_kmeans1 <- kmeans(sampled_data, 5)
res_kmeans1 <- kmeans(reduced_data, 5)
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
mclust::Mclust(sampled_data, 5)
sampled_data
Mclust(sampled_data, 5)
library(mclust)
Mclust(sampled_data, 5)
aa <- Mclust(sampled_data, 5)
aa$classification
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# k-means
res_kmeans1 <- kmeans(sampled_data, 5)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, 5)
max_match(sampled_membership, res_kmeans2$cluster)
# Mclust
res_mclust1 <- Mclust(sampled_data, 5)
max_match(sampled_membership, res_mclust1$cluster)
res_mclust2 <- Mclust(reduced_data, 5)
max_match(sampled_membership, res_mclust2$cluster)
max_match(sampled_membership, res_mclust1$classification)
max_match(sampled_membership, res_mclust2$classification)
BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
aa <- BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
res_BBMM1 <- aa
max_match(sampled_membership, res_BBMM1$classification)
max_match(sampled_membership, res_mclust2$newclustermembership)
res_mclust2
max_match(sampled_membership, res_BBMM1$newclustermembership)
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*3)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*3)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*3)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
# k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
max_match(sampled_membership, res_kmeans2$cluster)
# Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
max_match(sampled_membership, res_mclust2$classification)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*3)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*3)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*3)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
# k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
# Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
correct_samples <- cluster_benchmark(sampled_data, sampled_membership, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 5)
correct_samples
correct_fraction <- correct_samples/(dim(sampled_data)[1])
correct_fraction
rsum(correct_fraction)
rowsum(correct_fraction)
sum(correct_fraction)
rmean(correct_fraction)
rowMeans(correct_fraction)
colMeans(correct_fraction)
sampleData
sampleData
cluster_benchmark
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
# k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
# Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=1)
test1 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=1)
test2 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=2)
test2$clustermembership
test2$clustermembership==test1$clustermembership
get.seed
test2 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds="2")
set.seed(1)
rand(1)
rand(2)
rrand
randomBN(5)
randomBN(5)
set.seed(1)
randomBN(5)
set.seed(1)
randomBN(5)
set.seed(1)
randomBN(5)
netClust
res_BBMM3 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 2, nIterations = 10, verbose=TRUE)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
res_BBMM2$newclustermembership==res_BBMM3$newclustermembership
rm(.Random.seed)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
res_BBMM2$newclustermembership==res_BBMM3$newclustermembership
res_BBMM3 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 2, nIterations = 10, verbose=TRUE)
res_BBMM2$newclustermembership==res_BBMM3$newclustermembership
res_BBMM3 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 200, nIterations = 10, verbose=TRUE)
res_BBMM2$newclustermembership==res_BBMM3$newclustermembership
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*100)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
# cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
# cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
# k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
# Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
## cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*100)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
## cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
## cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
## k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
## Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
## Bernoulli Mixture Model (BBMMclusterEM)
res_BBMM1 <- BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
correct_samples8 <- max_match(sampled_membership, res_BBMM1$newclustermembership)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = 1, nIterations = 10, verbose=TRUE)
correct_samples9 <- max_match(sampled_membership, res_BBMM2$newclustermembership)
# summarize results
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
correct_samples <- cluster_benchmark(sampled_data, sampled_membership, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 10)
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 7)
for (uu in 1:n_rep){
## cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*100)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
## cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
## cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
## k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
## Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
## Bernoulli Mixture Model (BBMMclusterEM)
res_BBMM1 <- BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
correct_samples8 <- max_match(sampled_membership, res_BBMM1$newclustermembership)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
correct_samples9 <- max_match(sampled_membership, res_BBMM2$newclustermembership)
# summarize results
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7, correct_samples8, correct_samples9)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
correct_samples <- cluster_benchmark(sampled_data, sampled_membership, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 10)
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 9)
for (uu in 1:n_rep){
## cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*100)
correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
## cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
## cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
## k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
## Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
## Bernoulli Mixture Model (BBMMclusterEM)
res_BBMM1 <- BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
correct_samples8 <- max_match(sampled_membership, res_BBMM1$newclustermembership)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
correct_samples9 <- max_match(sampled_membership, res_BBMM2$newclustermembership)
# summarize results
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7, correct_samples8, correct_samples9)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
n_vars
correct_samples <- cluster_benchmark(sampled_data, sampled_membership, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 10)
\
res_BBMM2$newclustermembership
adjustedRandIndex(res_BBMM2$newclustermembership,res_BBMM2$newclustermembership)
adjustedRandIndex(res_BBMM2$newclustermembership,res_BBMM3$newclustermembership)
adjustedRandIndex(res_BBMM2$newclustermembership,res_BBMM1$newclustermembership)
adjustedRandIndex(res_BBMM2$newclustermembership, res_BBMM3$newclustermembership)
res_BBMM2$newclustermembership==res_BBMM3$newclustermembership
res_BBMM2$newclustermembership
adjustedRandIndex(res_BBMM2$newclustermembership, res_BBMM3$newclustermembership)
adjustedRandIndex(as.character(res_BBMM2$newclustermembership), as.character(res_BBMM3$newclustermembership))
adjustedRandIndex(as.character(res_BBMM2$newclustermembership), as.character(res_BBMM3$newclustermembership))
cluster_benchmark <- function(sampled_data, sampled_membership, kclust = 3, nbg = 3, n_vars = 20, n_rep = 10){
correct_samples <- matrix(NA, n_rep, 9)
for (uu in 1:n_rep){
## cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=uu*100)
# correct_samples1 <- max_match(sampled_membership, cluster_results1$clustermembership)
correct_samples1 <- adjustedRandIndex(sampled_membership, cluster_results1$clustermembership)
## cluster all variables (variables and covariates)
cluster_results2 <- netClust(sampled_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
# correct_samples2 <- max_match(sampled_membership, cluster_results2$clustermembership)
correct_samples2 <- adjustedRandIndex(sampled_membership, cluster_results2$clustermembership)
## cluster only variables without covariates
reduced_data <- sampled_data[,1:n_vars]
cluster_results3 <- netClust(reduced_data, kclust = k_clust, nbg = 0, EMseeds=uu*100)
# correct_samples3 <- max_match(sampled_membership, cluster_results3$clustermembership)
correct_samples3 <- adjustedRandIndex(sampled_membership, cluster_results3$clustermembership)
## k-means
res_kmeans1 <- kmeans(sampled_data, k_clust)
# correct_samples4 <- max_match(sampled_membership, res_kmeans1$cluster)
correct_samples4 <- adjustedRandIndex(sampled_membership, res_kmeans1$cluster)
res_kmeans2 <- kmeans(reduced_data, k_clust)
# correct_samples5 <- max_match(sampled_membership, res_kmeans2$cluster)
correct_samples5 <- adjustedRandIndex(sampled_membership, res_kmeans2$cluster)
## Mclust
res_mclust1 <- Mclust(sampled_data, k_clust)
# correct_samples6 <- max_match(sampled_membership, res_mclust1$classification)
correct_samples6 <- adjustedRandIndex(sampled_membership, res_mclust1$classification)
res_mclust2 <- Mclust(reduced_data, k_clust)
# correct_samples7 <- max_match(sampled_membership, res_mclust2$classification)
correct_samples7 <- adjustedRandIndex(sampled_membership, res_mclust2$classification)
## Bernoulli Mixture Model (BBMMclusterEM)
res_BBMM1 <- BBMMclusterEM(sampled_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
# correct_samples8 <- max_match(sampled_membership, res_BBMM1$newclustermembership)
correct_samples8 <- adjustedRandIndex(sampled_membership, res_BBMM1$newclustermembership)
res_BBMM2 <- BBMMclusterEM(reduced_data, chi = 0.5, kclust = 5, startseed = uu*100, nIterations = 10, verbose=TRUE)
# correct_samples9 <- max_match(sampled_membership, res_BBMM2$newclustermembership)
correct_samples9 <- adjustedRandIndex(sampled_membership, res_BBMM2$newclustermembership)
# summarize results
correct_samples[uu,] <- c(correct_samples1, correct_samples2, correct_samples3, correct_samples4, correct_samples5, correct_samples6, correct_samples7, correct_samples8, correct_samples9)
# correct_fraction <- correct_samples/(dim(sampled_data)[1])
}
return(correct_samples)
}
BBMMclusterEM <- function(binaryMatrix, chi, kclust, startseed=100, nIterations=50, verbose=FALSE) {
set.seed(startseed)
# Check for input arguments
if (missing(binaryMatrix) || !all(binaryMatrix < 2)) stop("Need a binary matrix as input to cluster.")
if(missing(chi)) stop('Need to provide a value for chi.')
if(chi==0) {
#print('Zero chi, setting chi to 1e-3')
chi<-1e-3
}
if (missing(kclust)) stop('Need to provide a value for kclust.')
if (as.integer(nIterations) < 1) {
stop('Need to specify a positive integer.')
} else {
nIterations <- as.integer(nIterations)
}
if (startseed < 0) stop("Need to specify a positive integer as startseed.")
tmp <- lapply(seq(nIterations), doIterate, startseed, chi, kclust, binaryMatrix,verbose)
idx <- which.min(sapply(tmp, '[', 'testAIC'))
output <- tmp[[idx]]
return(output)
}
load("~/Documents/phd_main/packages/netClust/R/clusterfns.R")
# cluster with covariate-adjusted framework
cluster_results1 <- netClust(sampled_data, kclust = k_clust, nbg = n_bg, EMseeds=1)
correct_samples <- cluster_benchmark(sampled_data, sampled_membership, kclust = k_clust, nbg = n_bg, n_vars = n_vars, n_rep = 10)
correct_samples
barplot(correct_samples)
getwd()
saveRDS(correct_samples, "benchmark_res.rds")
load_all()
rm(list = c("BBMMclusterEM", "cluster_benchmark", "max_match"))
load_all()
parallel::mclapply
