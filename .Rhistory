equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list
fraction_list1 <- fraction_list
difference_list1 <- difference_list
difference_list
k_clust <- 8
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list1
fraction_list1[1,2,3,5,7,9]
fraction_list1[c(1,2,3,5,7,9)]
average(fraction_list1[c(1,2,3,5,7,9)])
mean(fraction_list1[c(1,2,3,5,7,9)])
fraction_list1[c(1,2,3,5,7,9)]
difference_list1[c(1,2,3,5,7,9)]
k_clust <- 4
n_vars <- 20
n_bg <- 10
n_samples <- NULL
bgedges <- "different"
equal_cpt_bg <- TRUE
set.seed(1)
fraction_list <- c()
difference_list <- c()
for (i in 1:10){
# sample data
sampled_results <- netClust:::sampleData(k_clust=k_clust, n_vars=n_vars, n_bg=n_bg, n_samples=n_samples,
bgedges=bgedges, equal_cpt_bg=equal_cpt_bg)
sampled_data <- sampled_results$sampled_data
sampled_membership <- sampled_results$cluster_membership
n_samples <- sampled_results$n_samples
# sampled_results_list <- append(sampled_results_list, sampled_results)
# clustering
# correct_samples[ww,] <- netClust:::cluster_benchmark(sampled_data, sampled_membership, k_clust = k_clust,
#                                                      n_bg = n_bg, n_vars = n_vars, n_rep = 1)
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::get_clusters(sampled_data, k_clust = k_clust, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_parallel <- end_time-start_time
## cluster with covariate-adjusted framework
start_time <- Sys.time()
cluster_results1 <- netClust::netCluster(sampled_data, k_clust = k_clust, itLim = 50, n_bg = n_bg, EMseeds=i)
end_time <- Sys.time()
delta_time_nonparallel <- end_time-start_time
fraction <- as.numeric(delta_time_nonparallel)/as.numeric(delta_time_parallel)
difference <- as.numeric(delta_time_nonparallel)-as.numeric(delta_time_parallel)
fraction_list <- c(fraction_list, fraction)
difference_list <- c(difference_list, difference)
}
fraction_list
library(devtools)
document()
load_all()
library(netClust)
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
simulation_data <- netClust::sampleData(k_clust = kclusters, n_vars = 20, n_samples = ss)
sampled_data <- simulation_data$sampled_data
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
traceback()
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
traceback()
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
samplescores
maxscorey
maxscorey[1]
load_all()
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
simulation_data <- netClust::sampleData(k_clust = kclusters, n_vars = 20, n_samples = ss)
sampled_data <- simulation_data$sampled_data
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
cluster_res_t
cluster_res_t$clustermembership
simulation_data$cluster_membership
correct_samples1 <- adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
library(mclust)
correct_samples1 <- adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
correct_samples1
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
library(mclust)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
remotes::install_github("rileytwo/darkstudio")
''
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
darkstudio::activate()
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
remove.packages("darkstudio")
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
library(darkstudio)
darkstudio::activate()
library('darkstudio')
library("darkstudio")
darkstudio::activate()
install.packages("fs")
load_all()
library(devtools)
install.packages("fs")
install.packages("fs")
library(devtools)
load_all()
library(netClust)
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
simulation_data <- netClust::sampleData(k_clust = kclusters, n_vars = 20, n_samples = ss)
sampled_data <- simulation_data$sampled_data
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
library(mclust)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
get_clusters
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters, categorical=TRUE)
traceback()
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters, categorical=TRUE)
allrelativeprobs
samplescores
samplescores[1]
maxscorey
traceback()
traceback()
allrelativeprobs
sampled_data
as.character(sampled_data)
categorical_sampled_data <- as.character(sampled_data)
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters, categorical=TRUE)
cluster_res_t$newallrelativeprobabs
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters, newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
?get_clusters
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
dim(categorical_sampled_data)[1]
dim(categorical_sampled_data)[1]
categorical_sampled_data
dim(categorical_sampled_data)[1]
dim(categorical_sampled_data)
length(categorical_sampled_data)
sampled_data
categorical_sampled_data <- matrix(as.numeric(sampled_data),    # Convert to numeric matrix
ncol = ncol(sampled_data))
categorical_sampled_data
categorical_sampled_data <- matrix(as.numeric(sampled_data),    # Convert to numeric matrix
ncol = ncol(sampled_data))
categorical_sampled_data
categorical_sampled_data <- matrix(as.character(sampled_data),    # Convert to numeric matrix
ncol = ncol(sampled_data))
categorical_sampled_data
categorical_sampled_data <- matrix(as.character(sampled_data),    # Convert to numeric matrix
ncol = ncol(sampled_data))
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
samplescores
maxscorey
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
errortol<-1e-10# when to stop the assignment
scoresagainstclusters
allrelativeprobs
samplescores
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
samplescores
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
maxscorey
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
# Simulate binary data
kclusters <- 3
ss <- c(400, 500, 600) # samples in each cluster
simulation_data <- netClust::sampleData(k_clust = kclusters, n_vars = 20, n_samples = ss)
sampled_data <- simulation_data$sampled_data
# Network-based clustering
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters)
sampled_data <- simulation_data$sampled_data
categorical_sampled_data
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
cluster_res_t <- get_clusters(categorical_sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
samplescores
initparam$data
initparam
categorical_sampled_data
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
maxscorey
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
scoresagainstclusters
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
allrelativeprobs(scoresagainstclusters)
samplescores
samplescores
max
samplescores
samplescores
maxscorey
samplescores
relativeprobs
maxscorey
samplescores
incidence
samplescores
scoresagainstclusters
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
load_all()
document()
document()
document()
load_all()
library(netClust)
simulation_data
simulation_data$sampled_data
dim(simulation_data$sampled_data)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
rep(2,23)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(3,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
scoresagainstclusters
samplescores
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,3))
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
samplescores
netClust:::scoreparameters
netClust::scoreparameters
BiDAG::scoreparameters
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(2,23))
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(3,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(3,23))
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(3,23))
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE, bdecatCvec=rep(3,23))
BiDAG::scoreparameters(sampled_data)
library(BiDAG)
BiDAG::scoreparameters(sampled_data)
sampled_data
BiDAG::scoreparameters(sampled_data, "bde")
oretype=
BiDAG::scoreparameters(scoretype="bde", sampled_data)
BiDAG::scoreparameters(scoretype="bde", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bde", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bdecat", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bdecat", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bdecat", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bde", sampled_data)
sampled_data
test <- BiDAG::scoreparameters(scoretype="bde", sampled_data)
test <- BiDAG::scoreparameters(scoretype="bdecat", sampled_data)
test <- scoreparameters(scoretype="bdecat", sampled_data)
sampled_data[1]
sampled_data[1,]
sampled_data[,1]
sampled_data[,2]
sampled_data[,3]
sampled_data[,4]
sampled_data[,23]
ss <- c(400, 500, 600) # samples in each cluster
simulation_data <- netClust::sampleData(k_clust = kclusters, n_vars = 20, n_samples = ss)
sampled_data <- simulation_data$sampled_data
sampled_data
test <- scoreparameters(scoretype="bdecat", sampled_data)
apply(sampled_data,2,max)+1
apply(sampled_data,2,max)+1
test <- scoreparameters(scoretype="bdecat", sampled_data)
sampled_data
unlist(lapply(sampled_data, function(x) setequal(unique(x),c(0:max(x)))))
lapply(sampled_data, function(x) setequal(unique(x),c(0:max(x))))
test <- scoreparameters(scoretype="bdecat", sampled_data)
data_frame <- as.data.frame(sampled_data)
test <- scoreparameters(scoretype="bdecat", data_frame)
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
library(mclust)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
library(mclust)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
res_kmeans1 <- kmeans(sampled_data, kclusters)
res_kmeans1$cluster
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_BBMM2 <- BBMMclusterEM(sampled_data, chi = 0.5,
k_clust = 5, startseed = uu * 100, nIterations = 10,
verbose = TRUE)
res_BBMM2 <- BBMMclusterEM(sampled_data, chi = 0.5,
k_clust = 5, startseed = 1 * 100, nIterations = 10,
verbose = TRUE)
res_BBMM2 <- BBMMclusterEM(sampled_data, chi = 0.5, k_clust = 5, startseed = 1 * 100, nIterations = 10, verbose = TRUE)
adjustedRandIndex(simulation_data$cluster_membership, res_BBMM2$newclustermembership)
res_kmeans1 <- kmeans(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, res_kmeans1$cluster)
res_kmeans1$centers
res_BBMM2$relativeweights
mclust(sampled_data, kclusters)
mclust::mclust(sampled_data, kclusters)
mclust::Mclust(sampled_data, kclusters)
aa <- mclust::Mclust(sampled_data, kclusters)
aa$BIC
aa$classification
aa <- mclust::Mclust(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, aa$classification)
aa <- mclust::Mclust(sampled_data, kclusters)
adjustedRandIndex(simulation_data$cluster_membership, aa$classification)
aa$uncertainty
aa$z
aa$classification
res_BBMM2$relativeweights
dim(res_BBMM2$relativeweights)
dim(aa$z)
res_BBMM2$newclustermembership
aa$classification
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
aa$z
rowsums(aa$z)
rowSums(aa$z)
aa$z
rowSums(res_BBMM2$relativeweights)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
library(mclust)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
load_all()
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=FALSE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
cluster_res_t <- get_clusters(sampled_data, k_clust = kclusters,
newallrelativeprobabs = cluster_res_t$newallrelativeprobabs, categorical=TRUE)
adjustedRandIndex(simulation_data$cluster_membership, cluster_res_t$clustermembership)
